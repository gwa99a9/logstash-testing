input {
  pipeline {
    address => "response-processor"
  }
}

filter {
  # Start timing the pipeline processing
  ruby {
    code => "event.set('processing_start', Time.now.to_f)"
  }

  # Convert `json_message` field to JSON
  json {
    source => "json_message"
    target => "parsed_json"
  }

  # Extract and rename fields from parsed JSON with existence checks
  if [parsed_json][requestBody][userId] {
    mutate { rename => { "[parsed_json][requestBody][userId]" => "user_id" } }
  }
  if [parsed_json][requestBody][userName] {
    mutate { rename => { "[parsed_json][requestBody][userName]" => "user_name" } }
  }
  if [parsed_json][requestBody][isAuthenticated] {
    mutate { rename => { "[parsed_json][requestBody][isAuthenticated]" => "is_authenticated" } }
  }
  if [parsed_json][requestBody][email] {
    mutate { rename => { "[parsed_json][requestBody][email]" => "user_email" } }
  }
  if [parsed_json][requestBody][age] {
    mutate { rename => { "[parsed_json][requestBody][age]" => "user_age" } }
  }
  if [parsed_json][requestBody][subscriptionType] {
    mutate { rename => { "[parsed_json][requestBody][subscriptionType]" => "subscription_type" } }
  }
  if [parsed_json][requestBody][address][street] {
    mutate { rename => { "[parsed_json][requestBody][address][street]" => "user_address_street" } }
  }
  if [parsed_json][requestBody][address][city] {
    mutate { rename => { "[parsed_json][requestBody][address][city]" => "user_address_city" } }
  }
  if [parsed_json][requestBody][address][state] {
    mutate { rename => { "[parsed_json][requestBody][address][state]" => "user_address_state" } }
  }
  if [parsed_json][requestBody][address][zipCode] {
    mutate { rename => { "[parsed_json][requestBody][address][zipCode]" => "user_address_zipcode" } }
  }
  if [parsed_json][requestBody][preferences] {
    mutate { rename => { "[parsed_json][requestBody][preferences]" => "user_preferences" } }
  }
  if [parsed_json][requestBody][accountBalance] {
    mutate { rename => { "[parsed_json][requestBody][accountBalance]" => "user_account_balance" } }
  }
  if [parsed_json][requestBody][createdAt] {
    mutate { rename => { "[parsed_json][requestBody][createdAt]" => "user_created_at" } }
  }

  if [parsed_json][responseBody][status] {
    mutate { rename => { "[parsed_json][responseBody][status]" => "response_status" } }
  }
  if [parsed_json][responseBody][message] {
    mutate { rename => { "[parsed_json][responseBody][message]" => "response_message" } }
  }
  if [parsed_json][responseBody][userDetails][firstName] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][firstName]" => "user_first_name" } }
  }
  if [parsed_json][responseBody][userDetails][lastName] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][lastName]" => "user_last_name" } }
  }
  if [parsed_json][responseBody][userDetails][birthDate] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][birthDate]" => "user_birth_date" } }
  }
  if [parsed_json][responseBody][userDetails][gender] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][gender]" => "user_gender" } }
  }
  if [parsed_json][responseBody][userDetails][phone] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][phone]" => "user_phone" } }
  }
  if [parsed_json][responseBody][userDetails][emailVerified] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][emailVerified]" => "user_email_verified" } }
  }
  if [parsed_json][responseBody][userDetails][lastLogin] {
    mutate { rename => { "[parsed_json][responseBody][userDetails][lastLogin]" => "user_last_login" } }
  }
  if [parsed_json][responseBody][accountStatus][isActive] {
    mutate { rename => { "[parsed_json][responseBody][accountStatus][isActive]" => "account_active" } }
  }
  if [parsed_json][responseBody][accountStatus][createdAt] {
    mutate { rename => { "[parsed_json][responseBody][accountStatus][createdAt]" => "account_created_at" } }
  }
  if [parsed_json][responseBody][accountStatus][deactivatedAt] {
    mutate { rename => { "[parsed_json][responseBody][accountStatus][deactivatedAt]" => "account_deactivated_at" } }
  }
  if [parsed_json][responseBody][accountBalance] {
    mutate { rename => { "[parsed_json][responseBody][accountBalance]" => "account_balance" } }
  }
  if [parsed_json][responseBody][settings][notificationsEnabled] {
    mutate { rename => { "[parsed_json][responseBody][settings][notificationsEnabled]" => "notifications_enabled" } }
  }
  if [parsed_json][responseBody][settings][newsletterSubscribed] {
    mutate { rename => { "[parsed_json][responseBody][settings][newsletterSubscribed]" => "newsletter_subscribed" } }
  }
  if [parsed_json][responseBody][settings][darkMode] {
    mutate { rename => { "[parsed_json][responseBody][settings][darkMode]" => "dark_mode_enabled" } }
  }

  # Additional processing (e.g., extracting specific items from arrays, formatting fields)
  ruby {
    code => "
      contact_methods = event.get('[parsed_json][responseBody][userDetails][contactMethods]')
      primary_contact = contact_methods.find { |c| c['isPrimary'] } if contact_methods
      if primary_contact
        event.set('user_primary_contact_method', primary_contact['value'])
      end

      # Simulate additional processing by adding delays and dummy operations
      total = 0
      1000.times do |i|
        total += i * 3.14  # Arbitrary calculation to increase processing time
      end
      event.set('additional_processing', total)
    "
  }

  # Complex conditional logic to simulate more processing
  if [user_age] {
    if [user_age] < 18 {
      mutate { add_field => { "user_category" => "minor" } }
    } else if [user_age] >= 18 and [user_age] < 65 {
      mutate { add_field => { "user_category" => "adult" } }
    } else {
      mutate { add_field => { "user_category" => "senior" } }
    }
  }

  # Calculate processing time
  ruby {
    code => "
      processing_end = Time.now.to_f
      processing_start = event.get('processing_start')
      event.set('processing_time', (processing_end - processing_start) * 1000)  # Processing time in milliseconds
    "
  }

  # Clean up unused fields
  mutate {
    remove_field => ["message", "json_message", "parsed_json", "processing_start"]
  }
}

output {
  stdout { codec => rubydebug }  # To output JSON to the console

  # Uncomment below to send data to Elasticsearch
  # elasticsearch {
  #   hosts => ["localhost:9200"]
  #   index => "user_data"
  # }
}
